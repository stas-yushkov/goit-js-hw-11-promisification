{"version":3,"sources":["js/02-promisify.js"],"names":["delay","ms","Promise","res","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","username","callback","resolve","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","rej","id","logSuccess","logError","warn","amount","catch"],"mappings":";;;;;AAyFA,aAzFA,QAAA,qBACA,QAAA,4DAUA,MAAMA,EAAQC,GAAM,IAAIC,QAAQC,GAAOC,WAAW,IAAMD,EAAIF,GAAKA,IAE3DI,EAASC,GAAQC,QAAQC,uBAAuBF,OAGtDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAGjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,IAapBC,EAAkB,CAACC,EAAUC,EAAUC,IACpCd,QAAQe,QACbH,EAASI,IAAIC,GAASA,EAAKR,OAASI,EAAW,IAAKI,EAAMP,QAASO,EAAKP,QAAWO,IASvFN,EAAgBH,EAAO,SAASD,KAAKF,QAAQa,OAC7CP,EAAgBH,EAAO,QAAQD,KAAKF,QAAQa,OAG5C,MAAMC,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAkBC,IAChB5B,MAAAA,EAAQqB,EAA0B,IAAK,KACtC,OAAA,IAAInB,QAAQ,CAACC,EAAK0B,KACvBzB,WAAW,KACUoB,KAAKE,SAAW,GAGjCvB,EAAI,CAAE2B,GAAIF,EAAYE,GAAIxB,KAAMN,IAEhC6B,EAAID,EAAYE,KAEjB9B,MAID+B,EAAa,EAAGD,GAAAA,EAAIxB,KAAAA,MACxBC,QAAQC,mBAAmBsB,kBAAmBxB,QAG1C0B,EAAWF,IACfvB,QAAQ0B,qCAAqCH,+BAU/CH,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOzB,KAAKsB,GAAYI,MAAMH,GAChEL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOzB,KAAKsB,GAAYI,MAAMH,GAChEL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,KAAMzB,KAAKsB,GAAYI,MAAMH,GAC/DL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOzB,KAAKsB,GAAYI,MAAMH","file":"02-promisify.9274ffa9.js","sourceRoot":"../src","sourcesContent":["import '../sass/main.scss';\nimport '../../node_modules/modern-normalize/modern-normalize.css';\n\n// // ======================= Subtask 1 =======================\n\n// const delay = ms => {\n//   return new Promise(res => {\n//     setTimeout(() => res(ms), ms);\n//   });\n// };\n\nconst delay = ms => new Promise(res => setTimeout(() => res(ms), ms));\n\nconst logger = time => console.log(`Fulfilled after ${time}ms`);\n\n// Tests\ndelay(2000).then(logger); // Fulfilled after 2000ms\ndelay(1000).then(logger); // Fulfilled after 1000ms\ndelay(1500).then(logger); // Fulfilled after 1500ms\n\n// // ======================= Subtask 2 =======================\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: false },\n];\n\n// const toggleUserState = (allUsers, username, callback) => {\n//   return Promise.resolve(\n//     //\n//     (() =>\n//       allUsers.map(user => (user.name === username ? { ...user, active: !user.active } : user)))(),\n\n//     //\n//   );\n// };\n\nconst toggleUserState = (allUsers, username, callback) => {\n  return Promise.resolve(\n    allUsers.map(user => (user.name === username ? { ...user, active: !user.active } : user)),\n  );\n};\n\n// Currently the function works like this\n// toggleUserState(users, 'Mango', console.table);\n// toggleUserState(users, 'Ajax', console.table);\n\n// The function should work like this\ntoggleUserState(users, 'Mango').then(console.table);\ntoggleUserState(users, 'Ajax').then(console.table);\n\n// // ======================= Subtask 3 =======================\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n  const delay = randomIntegerFromInterval(200, 500);\n  return new Promise((res, rej) => {\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        res({ id: transaction.id, time: delay });\n      } else {\n        rej(transaction.id);\n      }\n    }, delay);\n  });\n};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n// Currently the function works like this\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n\n// The function should work like this\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n"]}